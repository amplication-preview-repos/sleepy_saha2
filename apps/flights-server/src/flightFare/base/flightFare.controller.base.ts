/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FlightFareService } from "../flightFare.service";
import { FlightFareCreateInput } from "./FlightFareCreateInput";
import { FlightFare } from "./FlightFare";
import { Request } from "../../request/base/Request";
import { FlightFareFindManyArgs } from "./FlightFareFindManyArgs";
import { FlightFareWhereUniqueInput } from "./FlightFareWhereUniqueInput";
import { FlightFareUpdateInput } from "./FlightFareUpdateInput";
import { RequestInputDto } from "../RequestInputDto";
import { RequestOutputDto } from "../RequestOutputDto";

export class FlightFareControllerBase {
  constructor(protected readonly service: FlightFareService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FlightFare })
  async createFlightFare(
    @common.Body() data: FlightFareCreateInput
  ): Promise<FlightFare> {
    return await this.service.createFlightFare({
      data: data,
      select: {
        createdAt: true,
        currency: true,
        destination: true,
        fare: true,
        id: true,
        origin: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FlightFare] })
  @ApiNestedQuery(FlightFareFindManyArgs)
  async flightFares(@common.Req() request: Request): Promise<FlightFare[]> {
    const args = plainToClass(FlightFareFindManyArgs, request.query);
    return this.service.flightFares({
      ...args,
      select: {
        createdAt: true,
        currency: true,
        destination: true,
        fare: true,
        id: true,
        origin: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FlightFare })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async flightFare(
    @common.Param() params: FlightFareWhereUniqueInput
  ): Promise<FlightFare | null> {
    const result = await this.service.flightFare({
      where: params,
      select: {
        createdAt: true,
        currency: true,
        destination: true,
        fare: true,
        id: true,
        origin: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FlightFare })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFlightFare(
    @common.Param() params: FlightFareWhereUniqueInput,
    @common.Body() data: FlightFareUpdateInput
  ): Promise<FlightFare | null> {
    try {
      return await this.service.updateFlightFare({
        where: params,
        data: data,
        select: {
          createdAt: true,
          currency: true,
          destination: true,
          fare: true,
          id: true,
          origin: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FlightFare })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFlightFare(
    @common.Param() params: FlightFareWhereUniqueInput
  ): Promise<FlightFare | null> {
    try {
      return await this.service.deleteFlightFare({
        where: params,
        select: {
          createdAt: true,
          currency: true,
          destination: true,
          fare: true,
          id: true,
          origin: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/get-latest-fares")
  @swagger.ApiOkResponse({
    type: RequestOutputDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetLatestFares(
    @common.Body()
    body: RequestInputDto
  ): Promise<RequestOutputDto> {
    return this.service.GetLatestFares(body);
  }
}
