/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FlightFare as PrismaFlightFare } from "@prisma/client";
import { RequestInputDto } from "../RequestInputDto";
import { RequestOutputDto } from "../RequestOutputDto";

export class FlightFareServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FlightFareCountArgs, "select">
  ): Promise<number> {
    return this.prisma.flightFare.count(args);
  }

  async flightFares(
    args: Prisma.FlightFareFindManyArgs
  ): Promise<PrismaFlightFare[]> {
    return this.prisma.flightFare.findMany(args);
  }
  async flightFare(
    args: Prisma.FlightFareFindUniqueArgs
  ): Promise<PrismaFlightFare | null> {
    return this.prisma.flightFare.findUnique(args);
  }
  async createFlightFare(
    args: Prisma.FlightFareCreateArgs
  ): Promise<PrismaFlightFare> {
    return this.prisma.flightFare.create(args);
  }
  async updateFlightFare(
    args: Prisma.FlightFareUpdateArgs
  ): Promise<PrismaFlightFare> {
    return this.prisma.flightFare.update(args);
  }
  async deleteFlightFare(
    args: Prisma.FlightFareDeleteArgs
  ): Promise<PrismaFlightFare> {
    return this.prisma.flightFare.delete(args);
  }
  async GetLatestFares(args: RequestInputDto): Promise<RequestOutputDto> {
    throw new Error("Not implemented");
  }
}
