/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FlightFare } from "./FlightFare";
import { FlightFareCountArgs } from "./FlightFareCountArgs";
import { FlightFareFindManyArgs } from "./FlightFareFindManyArgs";
import { FlightFareFindUniqueArgs } from "./FlightFareFindUniqueArgs";
import { CreateFlightFareArgs } from "./CreateFlightFareArgs";
import { UpdateFlightFareArgs } from "./UpdateFlightFareArgs";
import { DeleteFlightFareArgs } from "./DeleteFlightFareArgs";
import { RequestInputDto } from "../RequestInputDto";
import { RequestOutputDto } from "../RequestOutputDto";
import { FlightFareService } from "../flightFare.service";
@graphql.Resolver(() => FlightFare)
export class FlightFareResolverBase {
  constructor(protected readonly service: FlightFareService) {}

  async _flightFaresMeta(
    @graphql.Args() args: FlightFareCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FlightFare])
  async flightFares(
    @graphql.Args() args: FlightFareFindManyArgs
  ): Promise<FlightFare[]> {
    return this.service.flightFares(args);
  }

  @graphql.Query(() => FlightFare, { nullable: true })
  async flightFare(
    @graphql.Args() args: FlightFareFindUniqueArgs
  ): Promise<FlightFare | null> {
    const result = await this.service.flightFare(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FlightFare)
  async createFlightFare(
    @graphql.Args() args: CreateFlightFareArgs
  ): Promise<FlightFare> {
    return await this.service.createFlightFare({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FlightFare)
  async updateFlightFare(
    @graphql.Args() args: UpdateFlightFareArgs
  ): Promise<FlightFare | null> {
    try {
      return await this.service.updateFlightFare({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FlightFare)
  async deleteFlightFare(
    @graphql.Args() args: DeleteFlightFareArgs
  ): Promise<FlightFare | null> {
    try {
      return await this.service.deleteFlightFare(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RequestOutputDto)
  async GetLatestFares(
    @graphql.Args()
    args: RequestInputDto
  ): Promise<RequestOutputDto> {
    return this.service.GetLatestFares(args);
  }
}
